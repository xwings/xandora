<?php

class Model_Malwareinfo extends ORM
{
    protected $_table_name  = 'malwareinfo';
    protected $_primary_key = 'xid';
    protected $_belongs_to  = array(
        'fileextension' => array('foreign_key' => 'ext'),
    );
    protected $_has_one  = array(
        'staticheader'  => array('foreign_key' => 'xid'),
    );
    protected $_has_many    = array(
        'generatedfile' => array('foreign_key' => 'xid'),
        'registryinfo'  => array('foreign_key' => 'xid'),
        'processinfo'   => array('foreign_key' => 'xid'),
        'trafficinfo'   => array('foreign_key' => 'xid'),
        'screenshot'    => array('foreign_key' => 'xid'),
        'scaninfo'      => array('foreign_key' => 'xid'),
        'fileuid'  	    => array('foreign_key' => 'xid'),
    );

    /**
     * malware name 
     * 
     * @return string
     */
    public function name()
    {
        $sql = "select name from scaninfo where xid = :xid";
        $query = DB::query(Database::SELECT, $sql)->param(':xid', $this->xid);
        $name = $query->execute()->get('name');
        return ( $name == '' ) ? 'Unidentified' : $name;
    }

    /**
     * The other names for this malware according to different antivirus vendor
     * 
     * @return array
     */
    public function also_known_as()
    {
        $name_set = array();
        foreach ( $this->scaninfo->find_all() as $scan )
        {
            $name_set[] = $scan->name;
        }
        return $name_set;
    }

    /**
     * Range of ips that this malware connects to  
     * 
     * @return void
     */
    public function ip_set()
    {
        $ip_set = array();
        foreach ( $this->trafficinfo->find_all() as $traffic )
        {
            $ip_set[] = $traffic->ipv4;
        }
        return $ip_set;
    }

    /**
     * List of domain names
     * 
     * @return void
     */
    public function domain_set()
    {
        $domain_set = array();
        foreach ( $this->trafficinfo->find_all() as $traffic )
        {
            if ( $traffic->domain != '' ) $domain_set[] = $traffic->domain;
        }
        return $domain_set;
    }

    /**
     * Count total malwares by a criteria 
     * 
     * @param string $bycriteria 
     * @return integer
     */
    public function count_by($criteria)
    {
        return $this->filter_by($criteria)->count_all();
    }

    /**
     * filter_by 
     * 
     * @param string $criteria 
     * @return this
     */
    private function filter_by($criteria)
    {
        switch ( $criteria )
        {
            case 'processed':
                $where = $this->where('status', '=', 'Done');
                break;

            case 'queued':
                $where = $this->where('status', '=', 'Queue');
                break;

	        case 'process':
	                $where = $this->where('status', '=', 'Ready');
	                break;
            
			case 'processed_today':
                $where = $this->where('status', '=', 'Done')
                ->where('cdate', '=', DB::expr('CURRENT_DATE'));
                break;

            case 'processed_this_week':
                $where = $this->where('status', '=', 'Done')
                ->where(DB::expr('yearweek(cdate)'), '=', DB::expr('yearweek(now())'));
                break;

            case 'processed_this_month':
                $where = $this->where('status', '=', 'Done')
                ->where(DB::expr('substring(cdate from 1 for 7)'), 
                    '=', DB::expr('substring(now() from 1 for 7)'));
                break;

            default:
                $where = $this;
                break;
        }
        return $where;
    }


    /**
     * Count total malwares by a criteria 
     * 
     * @param string $bycriteria 
     * @return integer
     */
    public function ucount_by($ucriteria,$uid)
    {
        return $this->ufilter_by($ucriteria,$uid)->count_all();
    }

    /**
     * filter_by 
     * 
     * @param string $criteria 
     * @return this
     */
    private function ufilter_by($ucriteria,$uid)
    {
        switch ( $ucriteria )
        {
 						
			case 'uprocessed':
                $where = $this
					->join('fileuid')
					->on('fileuid.xid','=','malwareinfo.xid')
					->where('user_id','=',$uid)
					->where('status', '=', 'Done');

                break;

            case 'uqueued':
                $where = $this
					->join('fileuid')
					->on('fileuid.xid','=','malwareinfo.xid')
					->where('user_id','=',$uid)
					->where('status', '=', 'Queue');
                break;

	        case 'uprocess':
	                $where = $this
						->join('fileuid')
						->on('fileuid.xid','=','malwareinfo.xid')
						->where('user_id','=',$uid)
						->where('status', '=', 'Ready');
	                break;
            
			case 'uprocessed_today':
                $where = $this
					->join('fileuid')
					->on('fileuid.xid','=','malwareinfo.xid')
					->where('user_id','=',$uid)
					->where('status', '=', 'Done')                
					->where('cdate', '=', DB::expr('CURRENT_DATE'));
                break;

            case 'uprocessed_this_week':
                $where = $this
					->join('fileuid')
					->on('fileuid.xid','=','malwareinfo.xid')
					->where('user_id','=',$uid)
					->where('status', '=', 'Done')
                ->where(DB::expr('yearweek(cdate)'), '=', DB::expr('yearweek(now())'));
                break;

            case 'uprocessed_this_month':
                $where = $this
					->join('fileuid')
					->on('fileuid.xid','=','malwareinfo.xid')
					->where('user_id','=',$uid)
					->where('status', '=', 'Done')
                	->where(DB::expr('substring(cdate from 1 for 7)'), 
                    '=', DB::expr('substring(now() from 1 for 7)'));
                break;

            default:
                $where = $this;
                break;
        }
        return $where;
    }


    /**
     * find_by_all 
     * 
     * @param mixed $offset 
     * @return array
     */
    public function find_by($criteria, $offset)
    {
        return $this->filter_by($criteria)
            ->limit(Kohana::config('pagination')->default['items_per_page'])
            ->offset($offset)
            ->order_by('cdate', 'desc')
			->order_by('ctime', 'desc')
            ->find_all();
    }
}
